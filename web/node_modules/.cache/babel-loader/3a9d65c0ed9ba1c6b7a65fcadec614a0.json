{"ast":null,"code":"export default class EventManager {\n  constructor() {\n    this.listeners = new Map();\n  }\n\n  on(event, listener) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n\n    this.listeners.get(event).push(listener);\n  }\n\n  emit(event, payload) {\n    if (!this.listeners.has(event)) {\n      return;\n    }\n\n    this.listeners.get(event).forEach(listener => {\n      listener(payload);\n    });\n  }\n\n  removeListener(event, listenerToRemove) {\n    const listeners = this.listeners.get(event);\n\n    if (!listeners) {\n      return;\n    }\n\n    const filteredListeners = listeners.filter(listener => listener !== listenerToRemove);\n    this.listeners.set(event, filteredListeners);\n  }\n\n}\nconst toastManager = new EventManager();\ntoastManager.on('addtoast', payload => {\n  console.log('1', payload);\n});\ntoastManager.on('addtoast', payload => {\n  console.log('2', payload);\n});\ntoastManager.emit('addtoast', {\n  type: 'danger',\n  text: 'Texto'\n});\ntoastManager.removeListener('addtoast', payload => {\n  console.log('2', payload);\n});\nconsole.log(toastManager);","map":{"version":3,"names":["EventManager","constructor","listeners","Map","on","event","listener","has","set","get","push","emit","payload","forEach","removeListener","listenerToRemove","filteredListeners","filter","toastManager","console","log","type","text"],"sources":["/home/melnik/dev/jstack/mycontacts/web/src/lib/EventManager.js"],"sourcesContent":["export default class EventManager {\n  constructor() {\n    this.listeners = new Map();\n  }\n\n  on(event, listener) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n\n    this.listeners.get(event).push(listener);\n  }\n\n  emit(event, payload) {\n    if (!this.listeners.has(event)) {\n      return;\n    }\n\n    this.listeners.get(event).forEach((listener) => {\n      listener(payload);\n    });\n  }\n\n  removeListener(event, listenerToRemove) {\n    const listeners = this.listeners.get(event);\n\n    if (!listeners) {\n      return;\n    }\n\n    const filteredListeners = listeners.filter(\n      (listener) => listener !== listenerToRemove,\n    );\n\n    this.listeners.set(event, filteredListeners);\n  }\n}\n\nconst toastManager = new EventManager();\n\ntoastManager.on('addtoast', (payload) => { console.log('1', payload); });\ntoastManager.on('addtoast', (payload) => { console.log('2', payload); });\n\ntoastManager.emit('addtoast', { type: 'danger', text: 'Texto' });\n\ntoastManager.removeListener('addtoast', (payload) => { console.log('2', payload); });\nconsole.log(toastManager);\n"],"mappings":"AAAA,eAAe,MAAMA,YAAN,CAAmB;EAChCC,WAAW,GAAG;IACZ,KAAKC,SAAL,GAAiB,IAAIC,GAAJ,EAAjB;EACD;;EAEDC,EAAE,CAACC,KAAD,EAAQC,QAAR,EAAkB;IAClB,IAAI,CAAC,KAAKJ,SAAL,CAAeK,GAAf,CAAmBF,KAAnB,CAAL,EAAgC;MAC9B,KAAKH,SAAL,CAAeM,GAAf,CAAmBH,KAAnB,EAA0B,EAA1B;IACD;;IAED,KAAKH,SAAL,CAAeO,GAAf,CAAmBJ,KAAnB,EAA0BK,IAA1B,CAA+BJ,QAA/B;EACD;;EAEDK,IAAI,CAACN,KAAD,EAAQO,OAAR,EAAiB;IACnB,IAAI,CAAC,KAAKV,SAAL,CAAeK,GAAf,CAAmBF,KAAnB,CAAL,EAAgC;MAC9B;IACD;;IAED,KAAKH,SAAL,CAAeO,GAAf,CAAmBJ,KAAnB,EAA0BQ,OAA1B,CAAmCP,QAAD,IAAc;MAC9CA,QAAQ,CAACM,OAAD,CAAR;IACD,CAFD;EAGD;;EAEDE,cAAc,CAACT,KAAD,EAAQU,gBAAR,EAA0B;IACtC,MAAMb,SAAS,GAAG,KAAKA,SAAL,CAAeO,GAAf,CAAmBJ,KAAnB,CAAlB;;IAEA,IAAI,CAACH,SAAL,EAAgB;MACd;IACD;;IAED,MAAMc,iBAAiB,GAAGd,SAAS,CAACe,MAAV,CACvBX,QAAD,IAAcA,QAAQ,KAAKS,gBADH,CAA1B;IAIA,KAAKb,SAAL,CAAeM,GAAf,CAAmBH,KAAnB,EAA0BW,iBAA1B;EACD;;AAnC+B;AAsClC,MAAME,YAAY,GAAG,IAAIlB,YAAJ,EAArB;AAEAkB,YAAY,CAACd,EAAb,CAAgB,UAAhB,EAA6BQ,OAAD,IAAa;EAAEO,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAiBR,OAAjB;AAA4B,CAAvE;AACAM,YAAY,CAACd,EAAb,CAAgB,UAAhB,EAA6BQ,OAAD,IAAa;EAAEO,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAiBR,OAAjB;AAA4B,CAAvE;AAEAM,YAAY,CAACP,IAAb,CAAkB,UAAlB,EAA8B;EAAEU,IAAI,EAAE,QAAR;EAAkBC,IAAI,EAAE;AAAxB,CAA9B;AAEAJ,YAAY,CAACJ,cAAb,CAA4B,UAA5B,EAAyCF,OAAD,IAAa;EAAEO,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAiBR,OAAjB;AAA4B,CAAnF;AACAO,OAAO,CAACC,GAAR,CAAYF,YAAZ"},"metadata":{},"sourceType":"module"}