{"ast":null,"code":"import delay from '../../utils/ delay';\nimport APIError from '../../errors/APIError';\n\nclass HttpClient {\n  constructor(baseURL) {\n    this.baseURL = baseURL;\n  }\n\n  get(path, options) {\n    return this.makeRequest(path, {\n      method: 'GET',\n      headers: options === null || options === void 0 ? void 0 : options.headers\n    });\n  }\n\n  post(path, options) {\n    return this.makeRequest(path, {\n      method: 'POST',\n      body: options === null || options === void 0 ? void 0 : options.body,\n      headers: options === null || options === void 0 ? void 0 : options.headers\n    });\n  }\n\n  put(path, options) {\n    return this.makeRequest(path, {\n      method: 'PUT',\n      body: options === null || options === void 0 ? void 0 : options.body,\n      headers: options === null || options === void 0 ? void 0 : options.headers\n    });\n  }\n\n  async makeRequest(path, options) {\n    await delay(500);\n    const headers = new Headers();\n\n    if (options.body) {\n      headers.append('Content-Type', 'application/json');\n    }\n\n    if (options.headers) {\n      // Object.keys(options.headers).forEach((name) => {\n      //   headers.append(name, options.headers[name]);\n      // });\n      Object.entries(options.headers).forEach(_ref => {\n        let [name, value] = _ref;\n        headers.append(name, value);\n      });\n    }\n\n    const response = await fetch(`${this.baseURL + path}`, {\n      method: options.method,\n      body: JSON.stringify(options.body),\n      headers\n    });\n    let responseBody = null;\n    const contentType = response.headers.get('Content-Type');\n\n    if (contentType.includes('application/json')) {\n      responseBody = await response.json();\n    }\n\n    if (response.ok) {\n      return responseBody;\n    }\n\n    throw new APIError(response, responseBody);\n  }\n\n}\n\nexport default HttpClient;","map":{"version":3,"names":["delay","APIError","HttpClient","constructor","baseURL","get","path","options","makeRequest","method","headers","post","body","put","Headers","append","Object","entries","forEach","name","value","response","fetch","JSON","stringify","responseBody","contentType","includes","json","ok"],"sources":["/home/melnik/dev/jstack/mycontacts/web/src/services/utils/HttpClient.js"],"sourcesContent":["import delay from '../../utils/ delay';\nimport APIError from '../../errors/APIError';\n\nclass HttpClient {\n  constructor(baseURL) {\n    this.baseURL = baseURL;\n  }\n\n  get(path, options) {\n    return this.makeRequest(path, {\n      method: 'GET',\n      headers: options?.headers,\n    });\n  }\n\n  post(path, options) {\n    return this.makeRequest(path, {\n      method: 'POST',\n      body: options?.body,\n      headers: options?.headers,\n    });\n  }\n\n  put(path, options) {\n    return this.makeRequest(path, {\n      method: 'PUT',\n      body: options?.body,\n      headers: options?.headers,\n    });\n  }\n\n  async makeRequest(path, options) {\n    await delay(500);\n\n    const headers = new Headers();\n\n    if (options.body) {\n      headers.append('Content-Type', 'application/json');\n    }\n\n    if (options.headers) {\n      // Object.keys(options.headers).forEach((name) => {\n      //   headers.append(name, options.headers[name]);\n      // });\n\n      Object.entries(options.headers).forEach(([name, value]) => {\n        headers.append(name, value);\n      });\n    }\n\n    const response = await fetch(`${this.baseURL + path}`, {\n      method: options.method,\n      body: JSON.stringify(options.body),\n      headers,\n    });\n\n    let responseBody = null;\n    const contentType = response.headers.get('Content-Type');\n    if (contentType.includes('application/json')) {\n      responseBody = await response.json();\n    }\n\n    if (response.ok) {\n      return responseBody;\n    }\n\n    throw new APIError(response, responseBody);\n  }\n}\n\nexport default HttpClient;\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,QAAP,MAAqB,uBAArB;;AAEA,MAAMC,UAAN,CAAiB;EACfC,WAAW,CAACC,OAAD,EAAU;IACnB,KAAKA,OAAL,GAAeA,OAAf;EACD;;EAEDC,GAAG,CAACC,IAAD,EAAOC,OAAP,EAAgB;IACjB,OAAO,KAAKC,WAAL,CAAiBF,IAAjB,EAAuB;MAC5BG,MAAM,EAAE,KADoB;MAE5BC,OAAO,EAAEH,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEG;IAFU,CAAvB,CAAP;EAID;;EAEDC,IAAI,CAACL,IAAD,EAAOC,OAAP,EAAgB;IAClB,OAAO,KAAKC,WAAL,CAAiBF,IAAjB,EAAuB;MAC5BG,MAAM,EAAE,MADoB;MAE5BG,IAAI,EAAEL,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEK,IAFa;MAG5BF,OAAO,EAAEH,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEG;IAHU,CAAvB,CAAP;EAKD;;EAEDG,GAAG,CAACP,IAAD,EAAOC,OAAP,EAAgB;IACjB,OAAO,KAAKC,WAAL,CAAiBF,IAAjB,EAAuB;MAC5BG,MAAM,EAAE,KADoB;MAE5BG,IAAI,EAAEL,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEK,IAFa;MAG5BF,OAAO,EAAEH,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEG;IAHU,CAAvB,CAAP;EAKD;;EAEgB,MAAXF,WAAW,CAACF,IAAD,EAAOC,OAAP,EAAgB;IAC/B,MAAMP,KAAK,CAAC,GAAD,CAAX;IAEA,MAAMU,OAAO,GAAG,IAAII,OAAJ,EAAhB;;IAEA,IAAIP,OAAO,CAACK,IAAZ,EAAkB;MAChBF,OAAO,CAACK,MAAR,CAAe,cAAf,EAA+B,kBAA/B;IACD;;IAED,IAAIR,OAAO,CAACG,OAAZ,EAAqB;MACnB;MACA;MACA;MAEAM,MAAM,CAACC,OAAP,CAAeV,OAAO,CAACG,OAAvB,EAAgCQ,OAAhC,CAAwC,QAAmB;QAAA,IAAlB,CAACC,IAAD,EAAOC,KAAP,CAAkB;QACzDV,OAAO,CAACK,MAAR,CAAeI,IAAf,EAAqBC,KAArB;MACD,CAFD;IAGD;;IAED,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKlB,OAAL,GAAeE,IAAK,EAAxB,EAA2B;MACrDG,MAAM,EAAEF,OAAO,CAACE,MADqC;MAErDG,IAAI,EAAEW,IAAI,CAACC,SAAL,CAAejB,OAAO,CAACK,IAAvB,CAF+C;MAGrDF;IAHqD,CAA3B,CAA5B;IAMA,IAAIe,YAAY,GAAG,IAAnB;IACA,MAAMC,WAAW,GAAGL,QAAQ,CAACX,OAAT,CAAiBL,GAAjB,CAAqB,cAArB,CAApB;;IACA,IAAIqB,WAAW,CAACC,QAAZ,CAAqB,kBAArB,CAAJ,EAA8C;MAC5CF,YAAY,GAAG,MAAMJ,QAAQ,CAACO,IAAT,EAArB;IACD;;IAED,IAAIP,QAAQ,CAACQ,EAAb,EAAiB;MACf,OAAOJ,YAAP;IACD;;IAED,MAAM,IAAIxB,QAAJ,CAAaoB,QAAb,EAAuBI,YAAvB,CAAN;EACD;;AAhEc;;AAmEjB,eAAevB,UAAf"},"metadata":{},"sourceType":"module"}