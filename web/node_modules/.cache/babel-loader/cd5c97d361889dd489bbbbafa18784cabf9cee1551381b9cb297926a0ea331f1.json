{"ast":null,"code":"import ContactMapper from './mappers/ContactMapper';\nimport HttpClient from './utils/HttpClient';\nclass ContactsService {\n  constructor() {\n    this.httpClient = new HttpClient('http://localhost:3001');\n  }\n  async listContacts(orderBy, signal) {\n    const contacts = await this.httpClient.get(`/contacts?orderBy=${orderBy || 'asc'}`, {\n      signal\n    });\n    return contacts.map(ContactMapper.toDomain);\n  }\n  async getContactById(id, signal) {\n    const contact = await this.httpClient.get(`/contacts/${id}`, {\n      signal\n    });\n    return ContactMapper.toDomain(contact);\n  }\n  createContact(contact) {\n    const body = ContactMapper.toPersistence(contact);\n    return this.httpClient.post('/contacts', {\n      body\n    });\n  }\n  updateContact(id, contact) {\n    const body = ContactMapper.toPersistence(contact);\n    return this.httpClient.put(`/contacts/${id}`, {\n      body\n    });\n  }\n  deleteContact(id) {\n    return this.httpClient.delete(`/contacts/${id}`);\n  }\n}\nexport default new ContactsService();","map":{"version":3,"names":["ContactMapper","HttpClient","ContactsService","constructor","httpClient","listContacts","orderBy","signal","contacts","get","map","toDomain","getContactById","id","contact","createContact","body","toPersistence","post","updateContact","put","deleteContact","delete"],"sources":["/home/melnik/dev/jstack/mycontacts/web/src/services/ContactsService.js"],"sourcesContent":["import ContactMapper from './mappers/ContactMapper';\nimport HttpClient from './utils/HttpClient';\n\nclass ContactsService {\n  constructor() {\n    this.httpClient = new HttpClient('http://localhost:3001');\n  }\n\n  async listContacts(orderBy, signal) {\n    const contacts = await this.httpClient.get(`/contacts?orderBy=${orderBy || 'asc'}`, { signal });\n\n    return contacts.map(ContactMapper.toDomain);\n  }\n\n  async getContactById(id, signal) {\n    const contact = await this.httpClient.get(`/contacts/${id}`, { signal });\n\n    return ContactMapper.toDomain(contact);\n  }\n\n  createContact(contact) {\n    const body = ContactMapper.toPersistence(contact);\n\n    return this.httpClient.post('/contacts', { body });\n  }\n\n  updateContact(id, contact) {\n    const body = ContactMapper.toPersistence(contact);\n\n    return this.httpClient.put(`/contacts/${id}`, { body });\n  }\n\n  deleteContact(id) {\n    return this.httpClient.delete(`/contacts/${id}`);\n  }\n}\n\nexport default new ContactsService();\n"],"mappings":"AAAA,OAAOA,aAAa,MAAM,yBAAyB;AACnD,OAAOC,UAAU,MAAM,oBAAoB;AAE3C,MAAMC,eAAe,CAAC;EACpBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,UAAU,GAAG,IAAIH,UAAU,CAAC,uBAAuB,CAAC;EAC3D;EAEA,MAAMI,YAAYA,CAACC,OAAO,EAAEC,MAAM,EAAE;IAClC,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACJ,UAAU,CAACK,GAAG,CAAE,qBAAoBH,OAAO,IAAI,KAAM,EAAC,EAAE;MAAEC;IAAO,CAAC,CAAC;IAE/F,OAAOC,QAAQ,CAACE,GAAG,CAACV,aAAa,CAACW,QAAQ,CAAC;EAC7C;EAEA,MAAMC,cAAcA,CAACC,EAAE,EAAEN,MAAM,EAAE;IAC/B,MAAMO,OAAO,GAAG,MAAM,IAAI,CAACV,UAAU,CAACK,GAAG,CAAE,aAAYI,EAAG,EAAC,EAAE;MAAEN;IAAO,CAAC,CAAC;IAExE,OAAOP,aAAa,CAACW,QAAQ,CAACG,OAAO,CAAC;EACxC;EAEAC,aAAaA,CAACD,OAAO,EAAE;IACrB,MAAME,IAAI,GAAGhB,aAAa,CAACiB,aAAa,CAACH,OAAO,CAAC;IAEjD,OAAO,IAAI,CAACV,UAAU,CAACc,IAAI,CAAC,WAAW,EAAE;MAAEF;IAAK,CAAC,CAAC;EACpD;EAEAG,aAAaA,CAACN,EAAE,EAAEC,OAAO,EAAE;IACzB,MAAME,IAAI,GAAGhB,aAAa,CAACiB,aAAa,CAACH,OAAO,CAAC;IAEjD,OAAO,IAAI,CAACV,UAAU,CAACgB,GAAG,CAAE,aAAYP,EAAG,EAAC,EAAE;MAAEG;IAAK,CAAC,CAAC;EACzD;EAEAK,aAAaA,CAACR,EAAE,EAAE;IAChB,OAAO,IAAI,CAACT,UAAU,CAACkB,MAAM,CAAE,aAAYT,EAAG,EAAC,CAAC;EAClD;AACF;AAEA,eAAe,IAAIX,eAAe,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}