{"ast":null,"code":"import delay from '../../utils/ delay';\nimport APIError from '../../errors/APIError';\n\nclass HttpClient {\n  constructor(baseURL) {\n    this.baseURL = baseURL;\n  }\n\n  get(path) {\n    return this.makeRequest(path, {\n      method: 'GET'\n    });\n  }\n\n  post(path, options) {\n    return this.makeRequest(path, {\n      method: 'POST',\n      body: options === null || options === void 0 ? void 0 : options.body,\n      headers: options === null || options === void 0 ? void 0 : options.headers\n    });\n  }\n\n  async makeRequest(path, options) {\n    await delay(500);\n    const headers = new Headers();\n\n    if (options.body) {\n      headers.append('Content-Type', 'application/json');\n    }\n\n    const response = await fetch(`${this.baseURL + path}`, {\n      method: options.method,\n      body: JSON.stringify(options.body),\n      headers\n    });\n    let responseBody = null;\n    const contentType = response.headers.get('Content-Type');\n\n    if (contentType.includes('application/json')) {\n      responseBody = await response.json();\n    }\n\n    if (response.ok) {\n      return responseBody;\n    }\n\n    throw new APIError(response, responseBody);\n  }\n\n}\n\nexport default HttpClient;","map":{"version":3,"names":["delay","APIError","HttpClient","constructor","baseURL","get","path","makeRequest","method","post","options","body","headers","Headers","append","response","fetch","JSON","stringify","responseBody","contentType","includes","json","ok"],"sources":["/home/melnik/dev/jstack/mycontacts/web/src/services/utils/HttpClient.js"],"sourcesContent":["import delay from '../../utils/ delay';\nimport APIError from '../../errors/APIError';\n\nclass HttpClient {\n  constructor(baseURL) {\n    this.baseURL = baseURL;\n  }\n\n  get(path) {\n    return this.makeRequest(path, {\n      method: 'GET',\n    });\n  }\n\n  post(path, options) {\n    return this.makeRequest(path, {\n      method: 'POST',\n      body: options?.body,\n      headers: options?.headers,\n    });\n  }\n\n  async makeRequest(path, options) {\n    await delay(500);\n\n    const headers = new Headers();\n\n    if (options.body) {\n      headers.append('Content-Type', 'application/json');\n    }\n\n    const response = await fetch(`${this.baseURL + path}`, {\n      method: options.method,\n      body: JSON.stringify(options.body),\n      headers,\n    });\n\n    let responseBody = null;\n    const contentType = response.headers.get('Content-Type');\n    if (contentType.includes('application/json')) {\n      responseBody = await response.json();\n    }\n\n    if (response.ok) {\n      return responseBody;\n    }\n\n    throw new APIError(response, responseBody);\n  }\n}\n\nexport default HttpClient;\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,QAAP,MAAqB,uBAArB;;AAEA,MAAMC,UAAN,CAAiB;EACfC,WAAW,CAACC,OAAD,EAAU;IACnB,KAAKA,OAAL,GAAeA,OAAf;EACD;;EAEDC,GAAG,CAACC,IAAD,EAAO;IACR,OAAO,KAAKC,WAAL,CAAiBD,IAAjB,EAAuB;MAC5BE,MAAM,EAAE;IADoB,CAAvB,CAAP;EAGD;;EAEDC,IAAI,CAACH,IAAD,EAAOI,OAAP,EAAgB;IAClB,OAAO,KAAKH,WAAL,CAAiBD,IAAjB,EAAuB;MAC5BE,MAAM,EAAE,MADoB;MAE5BG,IAAI,EAAED,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEC,IAFa;MAG5BC,OAAO,EAAEF,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEE;IAHU,CAAvB,CAAP;EAKD;;EAEgB,MAAXL,WAAW,CAACD,IAAD,EAAOI,OAAP,EAAgB;IAC/B,MAAMV,KAAK,CAAC,GAAD,CAAX;IAEA,MAAMY,OAAO,GAAG,IAAIC,OAAJ,EAAhB;;IAEA,IAAIH,OAAO,CAACC,IAAZ,EAAkB;MAChBC,OAAO,CAACE,MAAR,CAAe,cAAf,EAA+B,kBAA/B;IACD;;IAED,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKZ,OAAL,GAAeE,IAAK,EAAxB,EAA2B;MACrDE,MAAM,EAAEE,OAAO,CAACF,MADqC;MAErDG,IAAI,EAAEM,IAAI,CAACC,SAAL,CAAeR,OAAO,CAACC,IAAvB,CAF+C;MAGrDC;IAHqD,CAA3B,CAA5B;IAMA,IAAIO,YAAY,GAAG,IAAnB;IACA,MAAMC,WAAW,GAAGL,QAAQ,CAACH,OAAT,CAAiBP,GAAjB,CAAqB,cAArB,CAApB;;IACA,IAAIe,WAAW,CAACC,QAAZ,CAAqB,kBAArB,CAAJ,EAA8C;MAC5CF,YAAY,GAAG,MAAMJ,QAAQ,CAACO,IAAT,EAArB;IACD;;IAED,IAAIP,QAAQ,CAACQ,EAAb,EAAiB;MACf,OAAOJ,YAAP;IACD;;IAED,MAAM,IAAIlB,QAAJ,CAAac,QAAb,EAAuBI,YAAvB,CAAN;EACD;;AA7Cc;;AAgDjB,eAAejB,UAAf"},"metadata":{},"sourceType":"module"}