{"ast":null,"code":"import delay from '../../utils/ delay';\nimport APIError from '../../errors/APIError';\nclass HttpClient {\n  constructor(baseURL) {\n    this.baseURL = baseURL;\n  }\n  get(path, options) {\n    return this.makeRequest(path, {\n      method: 'GET',\n      headers: options === null || options === void 0 ? void 0 : options.headers\n    });\n  }\n  post(path, options) {\n    return this.makeRequest(path, {\n      method: 'POST',\n      body: options === null || options === void 0 ? void 0 : options.body,\n      headers: options === null || options === void 0 ? void 0 : options.headers\n    });\n  }\n  put(path, options) {\n    return this.makeRequest(path, {\n      method: 'PUT',\n      body: options === null || options === void 0 ? void 0 : options.body,\n      headers: options === null || options === void 0 ? void 0 : options.headers\n    });\n  }\n  delete(path, options) {\n    return this.makeRequest(path, {\n      method: 'DELETE',\n      headers: options === null || options === void 0 ? void 0 : options.headers\n    });\n  }\n  async makeRequest(path, options) {\n    await delay(500);\n    const headers = new Headers();\n    if (options.body) {\n      headers.append('Content-Type', 'application/json');\n    }\n    if (options.headers) {\n      // Object.keys(options.headers).forEach((name) => {\n      //   headers.append(name, options.headers[name]);\n      // });\n\n      Object.entries(options.headers).forEach(_ref => {\n        let [name, value] = _ref;\n        headers.append(name, value);\n      });\n    }\n    const response = await fetch(`${this.baseURL + path}`, {\n      method: options.method,\n      body: JSON.stringify(options.body),\n      headers\n    });\n    let responseBody = null;\n    const contentType = response.headers.get('Content-Type');\n    if (contentType !== null && contentType !== void 0 && contentType.includes('application/json')) {\n      responseBody = await response.json();\n    }\n    if (response.ok) {\n      return responseBody;\n    }\n    throw new APIError(response, responseBody);\n  }\n}\nexport default HttpClient;","map":{"version":3,"names":["delay","APIError","HttpClient","constructor","baseURL","get","path","options","makeRequest","method","headers","post","body","put","delete","Headers","append","Object","entries","forEach","_ref","name","value","response","fetch","JSON","stringify","responseBody","contentType","includes","json","ok"],"sources":["/home/melnik/dev/jstack/mycontacts/web/src/services/utils/HttpClient.js"],"sourcesContent":["import delay from '../../utils/ delay';\nimport APIError from '../../errors/APIError';\n\nclass HttpClient {\n  constructor(baseURL) {\n    this.baseURL = baseURL;\n  }\n\n  get(path, options) {\n    return this.makeRequest(path, {\n      method: 'GET',\n      headers: options?.headers,\n    });\n  }\n\n  post(path, options) {\n    return this.makeRequest(path, {\n      method: 'POST',\n      body: options?.body,\n      headers: options?.headers,\n    });\n  }\n\n  put(path, options) {\n    return this.makeRequest(path, {\n      method: 'PUT',\n      body: options?.body,\n      headers: options?.headers,\n    });\n  }\n\n  delete(path, options) {\n    return this.makeRequest(path, {\n      method: 'DELETE',\n      headers: options?.headers,\n    });\n  }\n\n  async makeRequest(path, options) {\n    await delay(500);\n\n    const headers = new Headers();\n\n    if (options.body) {\n      headers.append('Content-Type', 'application/json');\n    }\n\n    if (options.headers) {\n      // Object.keys(options.headers).forEach((name) => {\n      //   headers.append(name, options.headers[name]);\n      // });\n\n      Object.entries(options.headers).forEach(([name, value]) => {\n        headers.append(name, value);\n      });\n    }\n\n    const response = await fetch(`${this.baseURL + path}`, {\n      method: options.method,\n      body: JSON.stringify(options.body),\n      headers,\n    });\n\n    let responseBody = null;\n    const contentType = response.headers.get('Content-Type');\n    if (contentType?.includes('application/json')) {\n      responseBody = await response.json();\n    }\n\n    if (response.ok) {\n      return responseBody;\n    }\n\n    throw new APIError(response, responseBody);\n  }\n}\n\nexport default HttpClient;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,oBAAoB;AACtC,OAAOC,QAAQ,MAAM,uBAAuB;AAE5C,MAAMC,UAAU,CAAC;EACfC,WAAWA,CAACC,OAAO,EAAE;IACnB,IAAI,CAACA,OAAO,GAAGA,OAAO;EACxB;EAEAC,GAAGA,CAACC,IAAI,EAAEC,OAAO,EAAE;IACjB,OAAO,IAAI,CAACC,WAAW,CAACF,IAAI,EAAE;MAC5BG,MAAM,EAAE,KAAK;MACbC,OAAO,EAAEH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEG;IACpB,CAAC,CAAC;EACJ;EAEAC,IAAIA,CAACL,IAAI,EAAEC,OAAO,EAAE;IAClB,OAAO,IAAI,CAACC,WAAW,CAACF,IAAI,EAAE;MAC5BG,MAAM,EAAE,MAAM;MACdG,IAAI,EAAEL,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEK,IAAI;MACnBF,OAAO,EAAEH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEG;IACpB,CAAC,CAAC;EACJ;EAEAG,GAAGA,CAACP,IAAI,EAAEC,OAAO,EAAE;IACjB,OAAO,IAAI,CAACC,WAAW,CAACF,IAAI,EAAE;MAC5BG,MAAM,EAAE,KAAK;MACbG,IAAI,EAAEL,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEK,IAAI;MACnBF,OAAO,EAAEH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEG;IACpB,CAAC,CAAC;EACJ;EAEAI,MAAMA,CAACR,IAAI,EAAEC,OAAO,EAAE;IACpB,OAAO,IAAI,CAACC,WAAW,CAACF,IAAI,EAAE;MAC5BG,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAEH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEG;IACpB,CAAC,CAAC;EACJ;EAEA,MAAMF,WAAWA,CAACF,IAAI,EAAEC,OAAO,EAAE;IAC/B,MAAMP,KAAK,CAAC,GAAG,CAAC;IAEhB,MAAMU,OAAO,GAAG,IAAIK,OAAO,EAAE;IAE7B,IAAIR,OAAO,CAACK,IAAI,EAAE;MAChBF,OAAO,CAACM,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC;IACpD;IAEA,IAAIT,OAAO,CAACG,OAAO,EAAE;MACnB;MACA;MACA;;MAEAO,MAAM,CAACC,OAAO,CAACX,OAAO,CAACG,OAAO,CAAC,CAACS,OAAO,CAACC,IAAA,IAAmB;QAAA,IAAlB,CAACC,IAAI,EAAEC,KAAK,CAAC,GAAAF,IAAA;QACpDV,OAAO,CAACM,MAAM,CAACK,IAAI,EAAEC,KAAK,CAAC;MAC7B,CAAC,CAAC;IACJ;IAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,IAAI,CAACpB,OAAO,GAAGE,IAAK,EAAC,EAAE;MACrDG,MAAM,EAAEF,OAAO,CAACE,MAAM;MACtBG,IAAI,EAAEa,IAAI,CAACC,SAAS,CAACnB,OAAO,CAACK,IAAI,CAAC;MAClCF;IACF,CAAC,CAAC;IAEF,IAAIiB,YAAY,GAAG,IAAI;IACvB,MAAMC,WAAW,GAAGL,QAAQ,CAACb,OAAO,CAACL,GAAG,CAAC,cAAc,CAAC;IACxD,IAAIuB,WAAW,aAAXA,WAAW,eAAXA,WAAW,CAAEC,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MAC7CF,YAAY,GAAG,MAAMJ,QAAQ,CAACO,IAAI,EAAE;IACtC;IAEA,IAAIP,QAAQ,CAACQ,EAAE,EAAE;MACf,OAAOJ,YAAY;IACrB;IAEA,MAAM,IAAI1B,QAAQ,CAACsB,QAAQ,EAAEI,YAAY,CAAC;EAC5C;AACF;AAEA,eAAezB,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}