{"ast":null,"code":"import delay from '../../utils/ delay';\nimport APIError from '../../errors/APIError';\n\nclass HttpClient {\n  constructor(baseURL) {\n    this.baseURL = baseURL;\n  }\n\n  get(path) {\n    return this.makeRequest(path, {\n      method: 'GET'\n    });\n  }\n\n  post(path, body) {\n    return this.makeRequest(path, {\n      method: 'POST',\n      body\n    });\n  }\n\n  async makeRequest(path, options) {\n    await delay(500);\n    const headers = new Headers({\n      'Content-Type': 'application/json'\n    });\n    const response = await fetch(`${this.baseURL + path}`, {\n      method: options.method,\n      body: JSON.stringify(options.body),\n      headers\n    });\n    let responseBody = null;\n    const contentType = response.headers.get('Content-Type');\n\n    if (contentType.includes('application/json')) {\n      responseBody = await response.json();\n    }\n\n    if (response.ok) {\n      return responseBody;\n    }\n\n    throw new APIError(response, responseBody);\n  }\n\n}\n\nexport default HttpClient;","map":{"version":3,"names":["delay","APIError","HttpClient","constructor","baseURL","get","path","makeRequest","method","post","body","options","headers","Headers","response","fetch","JSON","stringify","responseBody","contentType","includes","json","ok"],"sources":["/home/melnik/dev/jstack/mycontacts/web/src/services/utils/HttpClient.js"],"sourcesContent":["import delay from '../../utils/ delay';\nimport APIError from '../../errors/APIError';\n\nclass HttpClient {\n  constructor(baseURL) {\n    this.baseURL = baseURL;\n  }\n\n  get(path) {\n    return this.makeRequest(path, { method: 'GET' });\n  }\n\n  post(path, body) {\n    return this.makeRequest(path, {\n      method: 'POST',\n      body,\n    });\n  }\n\n  async makeRequest(path, options) {\n    await delay(500);\n\n    const headers = new Headers({\n      'Content-Type': 'application/json',\n    });\n\n    const response = await fetch(`${this.baseURL + path}`, {\n      method: options.method,\n      body: JSON.stringify(options.body),\n      headers,\n    });\n\n    let responseBody = null;\n    const contentType = response.headers.get('Content-Type');\n    if (contentType.includes('application/json')) {\n      responseBody = await response.json();\n    }\n\n    if (response.ok) {\n      return responseBody;\n    }\n\n    throw new APIError(response, responseBody);\n  }\n}\n\nexport default HttpClient;\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,QAAP,MAAqB,uBAArB;;AAEA,MAAMC,UAAN,CAAiB;EACfC,WAAW,CAACC,OAAD,EAAU;IACnB,KAAKA,OAAL,GAAeA,OAAf;EACD;;EAEDC,GAAG,CAACC,IAAD,EAAO;IACR,OAAO,KAAKC,WAAL,CAAiBD,IAAjB,EAAuB;MAAEE,MAAM,EAAE;IAAV,CAAvB,CAAP;EACD;;EAEDC,IAAI,CAACH,IAAD,EAAOI,IAAP,EAAa;IACf,OAAO,KAAKH,WAAL,CAAiBD,IAAjB,EAAuB;MAC5BE,MAAM,EAAE,MADoB;MAE5BE;IAF4B,CAAvB,CAAP;EAID;;EAEgB,MAAXH,WAAW,CAACD,IAAD,EAAOK,OAAP,EAAgB;IAC/B,MAAMX,KAAK,CAAC,GAAD,CAAX;IAEA,MAAMY,OAAO,GAAG,IAAIC,OAAJ,CAAY;MAC1B,gBAAgB;IADU,CAAZ,CAAhB;IAIA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKX,OAAL,GAAeE,IAAK,EAAxB,EAA2B;MACrDE,MAAM,EAAEG,OAAO,CAACH,MADqC;MAErDE,IAAI,EAAEM,IAAI,CAACC,SAAL,CAAeN,OAAO,CAACD,IAAvB,CAF+C;MAGrDE;IAHqD,CAA3B,CAA5B;IAMA,IAAIM,YAAY,GAAG,IAAnB;IACA,MAAMC,WAAW,GAAGL,QAAQ,CAACF,OAAT,CAAiBP,GAAjB,CAAqB,cAArB,CAApB;;IACA,IAAIc,WAAW,CAACC,QAAZ,CAAqB,kBAArB,CAAJ,EAA8C;MAC5CF,YAAY,GAAG,MAAMJ,QAAQ,CAACO,IAAT,EAArB;IACD;;IAED,IAAIP,QAAQ,CAACQ,EAAb,EAAiB;MACf,OAAOJ,YAAP;IACD;;IAED,MAAM,IAAIjB,QAAJ,CAAaa,QAAb,EAAuBI,YAAvB,CAAN;EACD;;AAxCc;;AA2CjB,eAAehB,UAAf"},"metadata":{},"sourceType":"module"}