{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nexport default function useErrors() {\n  _s();\n  const [errors, setErrors] = useState([]);\n  const setError = useCallback(_ref => {\n    let {\n      field,\n      message\n    } = _ref;\n    const errorAlreadyExists = errors.find(error => error.field === field);\n    if (errorAlreadyExists) {\n      return;\n    }\n    setErrors(prevState => [...prevState, {\n      field,\n      message\n    }]);\n  }, [errors]);\n  const removeError = useCallback(fieldName => {\n    setErrors(prevState => prevState.filter(error => error.field !== fieldName));\n  }, []);\n  const getErrorMessageByFieldName = useCallback(fieldName => {\n    var _errors$find;\n    return (_errors$find = errors.find(error => error.field === fieldName)) === null || _errors$find === void 0 ? void 0 : _errors$find.message;\n  }, [errors]);\n  return {\n    errors,\n    setError,\n    removeError,\n    getErrorMessageByFieldName\n  };\n}\n_s(useErrors, \"gyXbHTeQqbzFunaibSexriSjAn8=\");","map":{"version":3,"names":["useState","useCallback","useErrors","_s","errors","setErrors","setError","_ref","field","message","errorAlreadyExists","find","error","prevState","removeError","fieldName","filter","getErrorMessageByFieldName","_errors$find"],"sources":["/home/melnik/dev/jstack/mycontacts/web/src/hooks/useErrors.js"],"sourcesContent":["import { useState, useCallback } from 'react';\n\nexport default function useErrors() {\n  const [errors, setErrors] = useState([]);\n\n  const setError = useCallback(({ field, message }) => {\n    const errorAlreadyExists = errors.find((error) => error.field === field);\n\n    if (errorAlreadyExists) {\n      return;\n    }\n\n    setErrors((prevState) => [\n      ...prevState,\n      { field, message },\n    ]);\n  }, [errors]);\n\n  const removeError = useCallback((fieldName) => {\n    setErrors((prevState) => prevState.filter(\n      (error) => error.field !== fieldName,\n    ));\n  }, []);\n\n  const getErrorMessageByFieldName = useCallback((fieldName) => (\n    errors.find((error) => error.field === fieldName)?.message\n  ), [errors]);\n\n  return {\n    errors,\n    setError,\n    removeError,\n    getErrorMessageByFieldName,\n  };\n}\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAE7C,eAAe,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAClC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMM,QAAQ,GAAGL,WAAW,CAACM,IAAA,IAAwB;IAAA,IAAvB;MAAEC,KAAK;MAAEC;IAAQ,CAAC,GAAAF,IAAA;IAC9C,MAAMG,kBAAkB,GAAGN,MAAM,CAACO,IAAI,CAAEC,KAAK,IAAKA,KAAK,CAACJ,KAAK,KAAKA,KAAK,CAAC;IAExE,IAAIE,kBAAkB,EAAE;MACtB;IACF;IAEAL,SAAS,CAAEQ,SAAS,IAAK,CACvB,GAAGA,SAAS,EACZ;MAAEL,KAAK;MAAEC;IAAQ,CAAC,CACnB,CAAC;EACJ,CAAC,EAAE,CAACL,MAAM,CAAC,CAAC;EAEZ,MAAMU,WAAW,GAAGb,WAAW,CAAEc,SAAS,IAAK;IAC7CV,SAAS,CAAEQ,SAAS,IAAKA,SAAS,CAACG,MAAM,CACtCJ,KAAK,IAAKA,KAAK,CAACJ,KAAK,KAAKO,SAAS,CACrC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,0BAA0B,GAAGhB,WAAW,CAAEc,SAAS;IAAA,IAAAG,YAAA;IAAA,QAAAA,YAAA,GACvDd,MAAM,CAACO,IAAI,CAAEC,KAAK,IAAKA,KAAK,CAACJ,KAAK,KAAKO,SAAS,CAAC,cAAAG,YAAA,uBAAjDA,YAAA,CAAmDT,OAAO;EAAA,CAC3D,EAAE,CAACL,MAAM,CAAC,CAAC;EAEZ,OAAO;IACLA,MAAM;IACNE,QAAQ;IACRQ,WAAW;IACXG;EACF,CAAC;AACH;AAACd,EAAA,CAhCuBD,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}