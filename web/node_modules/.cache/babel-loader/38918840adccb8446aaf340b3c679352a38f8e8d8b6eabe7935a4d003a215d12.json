{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport toast from '../../utils/toast';\nimport useSafeAsyncAction from '../../hooks/useSafeAsyncAction';\nimport ContactsService from '../../services/ContactsService';\nexport default function useEditContact() {\n  _s();\n  const [isLoading, setIsLoading] = useState(true);\n  const [contactName, setContactName] = useState('');\n  const contactFormRef = useRef(null);\n  const {\n    id\n  } = useParams();\n  const history = useHistory();\n  const safeAsyncAction = useSafeAsyncAction();\n  useEffect(() => {\n    async function loadContact() {\n      try {\n        const contact = await ContactsService.getContactById(id);\n        safeAsyncAction(() => {\n          contactFormRef.current.setFieldsValue(contact);\n          setIsLoading(false);\n          setContactName(contact.name);\n        });\n      } catch {\n        safeAsyncAction(() => {\n          history.push('/');\n          toast({\n            type: 'danger',\n            text: 'Contato não encontrado!'\n          });\n        });\n      }\n    }\n    loadContact();\n  }, [id, history, safeAsyncAction]);\n  async function handleSubmit(contact) {\n    try {\n      const contactData = await ContactsService.updateContact(id, contact);\n      setContactName(contactData.name);\n      toast({\n        type: 'success',\n        text: 'Contato editado com sucesso'\n      });\n    } catch {\n      toast({\n        type: 'danger',\n        text: 'Ocorreu um erro ao editar o contato'\n      });\n    }\n  }\n  return {\n    isLoading,\n    contactName,\n    contactFormRef,\n    handleSubmit\n  };\n}\n_s(useEditContact, \"MZLmwQ0a/8FDtg6wJ0EMwewl2lc=\", false, function () {\n  return [useParams, useHistory, useSafeAsyncAction];\n});","map":{"version":3,"names":["useState","useEffect","useRef","useParams","useHistory","toast","useSafeAsyncAction","ContactsService","useEditContact","_s","isLoading","setIsLoading","contactName","setContactName","contactFormRef","id","history","safeAsyncAction","loadContact","contact","getContactById","current","setFieldsValue","name","push","type","text","handleSubmit","contactData","updateContact"],"sources":["/home/melnik/dev/jstack/mycontacts/web/src/pages/EditContact/useEditContact.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\n\nimport toast from '../../utils/toast';\nimport useSafeAsyncAction from '../../hooks/useSafeAsyncAction';\nimport ContactsService from '../../services/ContactsService';\n\nexport default function useEditContact() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [contactName, setContactName] = useState('');\n\n  const contactFormRef = useRef(null);\n\n  const { id } = useParams();\n  const history = useHistory();\n  const safeAsyncAction = useSafeAsyncAction();\n\n  useEffect(() => {\n    async function loadContact() {\n      try {\n        const contact = await ContactsService.getContactById(\n          id,\n        );\n\n        safeAsyncAction(() => {\n          contactFormRef.current.setFieldsValue(contact);\n          setIsLoading(false);\n          setContactName(contact.name);\n        });\n      } catch {\n        safeAsyncAction(() => {\n          history.push('/');\n          toast({\n            type: 'danger',\n            text: 'Contato não encontrado!',\n          });\n        });\n      }\n    }\n\n    loadContact();\n  }, [id, history, safeAsyncAction]);\n\n  async function handleSubmit(contact) {\n    try {\n      const contactData = await ContactsService.updateContact(id, contact);\n\n      setContactName(contactData.name);\n\n      toast({\n        type: 'success',\n        text: 'Contato editado com sucesso',\n      });\n    } catch {\n      toast({\n        type: 'danger',\n        text: 'Ocorreu um erro ao editar o contato',\n      });\n    }\n  }\n\n  return {\n    isLoading,\n    contactName,\n    contactFormRef,\n    handleSubmit,\n  };\n}\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACnD,SAASC,SAAS,EAAEC,UAAU,QAAQ,kBAAkB;AAExD,OAAOC,KAAK,MAAM,mBAAmB;AACrC,OAAOC,kBAAkB,MAAM,gCAAgC;AAC/D,OAAOC,eAAe,MAAM,gCAAgC;AAE5D,eAAe,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACvC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAMc,cAAc,GAAGZ,MAAM,CAAC,IAAI,CAAC;EAEnC,MAAM;IAAEa;EAAG,CAAC,GAAGZ,SAAS,EAAE;EAC1B,MAAMa,OAAO,GAAGZ,UAAU,EAAE;EAC5B,MAAMa,eAAe,GAAGX,kBAAkB,EAAE;EAE5CL,SAAS,CAAC,MAAM;IACd,eAAeiB,WAAWA,CAAA,EAAG;MAC3B,IAAI;QACF,MAAMC,OAAO,GAAG,MAAMZ,eAAe,CAACa,cAAc,CAClDL,EAAE,CACH;QAEDE,eAAe,CAAC,MAAM;UACpBH,cAAc,CAACO,OAAO,CAACC,cAAc,CAACH,OAAO,CAAC;UAC9CR,YAAY,CAAC,KAAK,CAAC;UACnBE,cAAc,CAACM,OAAO,CAACI,IAAI,CAAC;QAC9B,CAAC,CAAC;MACJ,CAAC,CAAC,MAAM;QACNN,eAAe,CAAC,MAAM;UACpBD,OAAO,CAACQ,IAAI,CAAC,GAAG,CAAC;UACjBnB,KAAK,CAAC;YACJoB,IAAI,EAAE,QAAQ;YACdC,IAAI,EAAE;UACR,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ;IACF;IAEAR,WAAW,EAAE;EACf,CAAC,EAAE,CAACH,EAAE,EAAEC,OAAO,EAAEC,eAAe,CAAC,CAAC;EAElC,eAAeU,YAAYA,CAACR,OAAO,EAAE;IACnC,IAAI;MACF,MAAMS,WAAW,GAAG,MAAMrB,eAAe,CAACsB,aAAa,CAACd,EAAE,EAAEI,OAAO,CAAC;MAEpEN,cAAc,CAACe,WAAW,CAACL,IAAI,CAAC;MAEhClB,KAAK,CAAC;QACJoB,IAAI,EAAE,SAAS;QACfC,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC,CAAC,MAAM;MACNrB,KAAK,CAAC;QACJoB,IAAI,EAAE,QAAQ;QACdC,IAAI,EAAE;MACR,CAAC,CAAC;IACJ;EACF;EAEA,OAAO;IACLhB,SAAS;IACTE,WAAW;IACXE,cAAc;IACda;EACF,CAAC;AACH;AAAClB,EAAA,CA5DuBD,cAAc;EAAA,QAMrBL,SAAS,EACRC,UAAU,EACFE,kBAAkB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}