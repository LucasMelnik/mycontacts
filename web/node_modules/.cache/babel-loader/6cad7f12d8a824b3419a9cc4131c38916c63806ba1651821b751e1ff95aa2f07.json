{"ast":null,"code":"import ContactMapper from './mappers/ContactMapper';\nimport HttpClient from './utils/HttpClient';\nclass ContactsService {\n  constructor() {\n    this.httpClient = new HttpClient('http://localhost:3001');\n  }\n  async listContacts() {\n    let orderBy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'asc';\n    let signal = arguments.length > 1 ? arguments[1] : undefined;\n    const contacts = await this.httpClient.get(`/contacts?orderBy=${orderBy}`, {\n      signal\n    });\n    return contacts.map(ContactMapper.toDomain);\n  }\n  async getContactById(id) {\n    const contact = await this.httpClient.get(`/contacts/${id}`);\n    return ContactMapper.toDomain(contact);\n  }\n  createContact(contact) {\n    const body = ContactMapper.toPersistence(contact);\n    return this.httpClient.post('/contacts', {\n      body\n    });\n  }\n  updateContact(id, contact) {\n    const body = ContactMapper.toPersistence(contact);\n    return this.httpClient.put(`/contacts/${id}`, {\n      body\n    });\n  }\n  deleteContact(id) {\n    return this.httpClient.delete(`/contacts/${id}`);\n  }\n}\nexport default new ContactsService();","map":{"version":3,"names":["ContactMapper","HttpClient","ContactsService","constructor","httpClient","listContacts","orderBy","arguments","length","undefined","signal","contacts","get","map","toDomain","getContactById","id","contact","createContact","body","toPersistence","post","updateContact","put","deleteContact","delete"],"sources":["/home/melnik/dev/jstack/mycontacts/web/src/services/ContactsService.js"],"sourcesContent":["import ContactMapper from './mappers/ContactMapper';\nimport HttpClient from './utils/HttpClient';\n\nclass ContactsService {\n  constructor() {\n    this.httpClient = new HttpClient('http://localhost:3001');\n  }\n\n  async listContacts(orderBy = 'asc', signal) {\n    const contacts = await this.httpClient.get(`/contacts?orderBy=${orderBy}`, { signal });\n\n    return contacts.map(ContactMapper.toDomain);\n  }\n\n  async getContactById(id) {\n    const contact = await this.httpClient.get(`/contacts/${id}`);\n\n    return ContactMapper.toDomain(contact);\n  }\n\n  createContact(contact) {\n    const body = ContactMapper.toPersistence(contact);\n\n    return this.httpClient.post('/contacts', { body });\n  }\n\n  updateContact(id, contact) {\n    const body = ContactMapper.toPersistence(contact);\n\n    return this.httpClient.put(`/contacts/${id}`, { body });\n  }\n\n  deleteContact(id) {\n    return this.httpClient.delete(`/contacts/${id}`);\n  }\n}\n\nexport default new ContactsService();\n"],"mappings":"AAAA,OAAOA,aAAa,MAAM,yBAAyB;AACnD,OAAOC,UAAU,MAAM,oBAAoB;AAE3C,MAAMC,eAAe,CAAC;EACpBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,UAAU,GAAG,IAAIH,UAAU,CAAC,uBAAuB,CAAC;EAC3D;EAEA,MAAMI,YAAYA,CAAA,EAA0B;IAAA,IAAzBC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IAAA,IAAEG,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;IACxC,MAAME,QAAQ,GAAG,MAAM,IAAI,CAACP,UAAU,CAACQ,GAAG,CAAE,qBAAoBN,OAAQ,EAAC,EAAE;MAAEI;IAAO,CAAC,CAAC;IAEtF,OAAOC,QAAQ,CAACE,GAAG,CAACb,aAAa,CAACc,QAAQ,CAAC;EAC7C;EAEA,MAAMC,cAAcA,CAACC,EAAE,EAAE;IACvB,MAAMC,OAAO,GAAG,MAAM,IAAI,CAACb,UAAU,CAACQ,GAAG,CAAE,aAAYI,EAAG,EAAC,CAAC;IAE5D,OAAOhB,aAAa,CAACc,QAAQ,CAACG,OAAO,CAAC;EACxC;EAEAC,aAAaA,CAACD,OAAO,EAAE;IACrB,MAAME,IAAI,GAAGnB,aAAa,CAACoB,aAAa,CAACH,OAAO,CAAC;IAEjD,OAAO,IAAI,CAACb,UAAU,CAACiB,IAAI,CAAC,WAAW,EAAE;MAAEF;IAAK,CAAC,CAAC;EACpD;EAEAG,aAAaA,CAACN,EAAE,EAAEC,OAAO,EAAE;IACzB,MAAME,IAAI,GAAGnB,aAAa,CAACoB,aAAa,CAACH,OAAO,CAAC;IAEjD,OAAO,IAAI,CAACb,UAAU,CAACmB,GAAG,CAAE,aAAYP,EAAG,EAAC,EAAE;MAAEG;IAAK,CAAC,CAAC;EACzD;EAEAK,aAAaA,CAACR,EAAE,EAAE;IAChB,OAAO,IAAI,CAACZ,UAAU,CAACqB,MAAM,CAAE,aAAYT,EAAG,EAAC,CAAC;EAClD;AACF;AAEA,eAAe,IAAId,eAAe,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}